#!/bin/bash
# Mode - Claude Code clone launcher script
# Usage: mode [directory]
#
# This script launches the coding agent from any directory.
# The working directory will be set to the current directory or specified directory.

# Get the directory where this script is located (resolve symlinks)
if [ -L "${BASH_SOURCE[0]}" ]; then
    # Script is a symlink, resolve it
    SCRIPT_PATH="$(readlink "${BASH_SOURCE[0]}")"
    SCRIPT_DIR="$(dirname "$SCRIPT_PATH")"
else
    # Script is not a symlink
    SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
fi

# Initialize variables
WORKING_DIR=""
LLM_PROVIDER=""

# Parse command line arguments
while [[ $# -gt 0 ]]; do
    case $1 in
        --help|-h)
            echo "ðŸ¤– Mode - Claude Code Clone"
            echo ""
            echo "Usage:"
            echo "  mode                    # Run in current directory (default: Grok)"
            echo "  mode /path              # Run in specified directory"
            echo "  mode --llm <provider>   # Specify LLM provider"
            echo "  mode --help             # Show this help"
            echo ""
            echo "LLM Providers:"
            echo "  claude, sonnet    # Use Claude/Anthropic"
            echo "  deepseek, ds      # Use DeepSeek"
            echo "  grok, xai         # Use Grok/xAI (default)"
            echo ""
            echo "Examples:"
            echo "  mode --llm claude"
            echo "  mode /path/to/project --llm deepseek"
            echo "  mode --llm grok"
            echo ""
            echo "The tool will start with the working directory set to the specified"
            echo "directory (or current directory if none specified)."
            exit 0
            ;;
        --llm)
            LLM_PROVIDER="$2"
            shift 2
            ;;
        -*)
            echo "Error: Unknown option $1"
            echo "Use --help for usage information"
            exit 1
            ;;
        *)
            if [ -z "$WORKING_DIR" ]; then
                WORKING_DIR="$1"
            else
                echo "Error: Multiple directory arguments provided"
                exit 1
            fi
            shift
            ;;
    esac
done

# Determine the working directory
if [ -n "$WORKING_DIR" ]; then
    # Directory specified as argument
    if [ ! -d "$WORKING_DIR" ]; then
        echo "Error: Directory '$WORKING_DIR' does not exist"
        exit 1
    fi
    # Convert to absolute path
    WORKING_DIR="$(cd "$WORKING_DIR" && pwd)"
else
    # Use current working directory
    WORKING_DIR="$(pwd)"
fi

echo "ðŸš€ Starting Mode in: $WORKING_DIR"

# Set environment variables
export INITIAL_DIR="$WORKING_DIR"
if [ -n "$LLM_PROVIDER" ]; then
    export SONPH_LLM_PROVIDER="$LLM_PROVIDER"
    echo "ðŸ¤– Using LLM provider: $LLM_PROVIDER"
fi

# Run the main script with virtual environment activated
# This preserves TTY better than 'uv run' for autocomplete support
if [ -f "$SCRIPT_DIR/.venv/bin/activate" ]; then
    source "$SCRIPT_DIR/.venv/bin/activate"
    # Run python with full path to main.py, staying in user's directory
    exec python "$SCRIPT_DIR/main.py"
else
    # Fallback to uv run if venv doesn't exist
    cd "$SCRIPT_DIR"
    exec uv run python main.py
fi